#if !defined(AFX_IMGEDIT_H__62C4C591_CE1A_11D1_A4D9_00A0242E2BA0__INCLUDED_)
#define AFX_IMGEDIT_H__62C4C591_CE1A_11D1_A4D9_00A0242E2BA0__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;
class CPicture;

/////////////////////////////////////////////////////////////////////////////
// CImgEdit wrapper class

class CImgEdit : public CWnd
{
protected:
	DECLARE_DYNCREATE(CImgEdit)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x6d940280, 0x9f11, 0x11ce, { 0x83, 0xfd, 0x2, 0x60, 0x8c, 0x3e, 0xc0, 0x8a } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetImage();
	void SetImage(LPCTSTR);
	CString GetImageControl();
	void SetImageControl(LPCTSTR);
	long GetAnnotationType();
	void SetAnnotationType(long);
	short GetAnnotationGroupCount();
	void SetAnnotationGroupCount(short);
	float GetZoom();
	void SetZoom(float);
	long GetPage();
	void SetPage(long);
	unsigned long GetAnnotationBackColor();
	void SetAnnotationBackColor(unsigned long);
	unsigned long GetAnnotationFillColor();
	void SetAnnotationFillColor(unsigned long);
	long GetAnnotationFillStyle();
	void SetAnnotationFillStyle(long);
	COleFont GetAnnotationFont();
	void SetAnnotationFont(LPDISPATCH);
	CString GetAnnotationImage();
	void SetAnnotationImage(LPCTSTR);
	unsigned long GetAnnotationLineColor();
	void SetAnnotationLineColor(unsigned long);
	long GetAnnotationLineStyle();
	void SetAnnotationLineStyle(long);
	short GetAnnotationLineWidth();
	void SetAnnotationLineWidth(short);
	CString GetAnnotationStampText();
	void SetAnnotationStampText(LPCTSTR);
	CString GetAnnotationTextFile();
	void SetAnnotationTextFile(LPCTSTR);
	long GetDisplayScaleAlgorithm();
	void SetDisplayScaleAlgorithm(long);
	BOOL GetImageDisplayed();
	void SetImageDisplayed(BOOL);
	long GetImageHeight();
	void SetImageHeight(long);
	BOOL GetImageModified();
	void SetImageModified(BOOL);
	long GetImagePalette();
	void SetImagePalette(long);
	long GetImageResolutionX();
	void SetImageResolutionX(long);
	long GetImageResolutionY();
	void SetImageResolutionY(long);
	long GetMousePointer();
	void SetMousePointer(long);
	long GetPageCount();
	void SetPageCount(long);
	BOOL GetScrollBars();
	void SetScrollBars(BOOL);
	long GetScrollPositionX();
	void SetScrollPositionX(long);
	long GetScrollPositionY();
	void SetScrollPositionY(long);
	unsigned long GetAnnotationFontColor();
	void SetAnnotationFontColor(unsigned long);
	short GetCompressionType();
	void SetCompressionType(short);
	short GetFileType();
	void SetFileType(short);
	BOOL GetScrollShortcutsEnabled();
	void SetScrollShortcutsEnabled(BOOL);
	BOOL GetSelectionRectangle();
	void SetSelectionRectangle(BOOL);
	short GetPageType();
	void SetPageType(short);
	long GetCompressionInfo();
	void SetCompressionInfo(long);
	long GetStatusCode();
	void SetStatusCode(long);
	CPicture GetMouseIcon();
	void SetMouseIcon(LPDISPATCH);
	BOOL GetAutoRefresh();
	void SetAutoRefresh(BOOL);
	long GetImageWidth();
	void SetImageWidth(long);
	short GetBorderStyle();
	void SetBorderStyle(short);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	long GetImageScaleHeight();
	void SetImageScaleHeight(long);
	long GetImageScaleWidth();
	void SetImageScaleWidth(long);

// Operations
public:
	void Display();
	CString GetAnnotationGroup(short Index);
	void AddAnnotationGroup(LPCTSTR GroupName);
	unsigned long GetSelectedAnnotationLineColor();
	void ClearDisplay();
	void DeleteAnnotationGroup(LPCTSTR GroupName);
	void DeleteImageData(const VARIANT& Left, const VARIANT& Top, const VARIANT& Width, const VARIANT& Height);
	void ClipboardCopy(const VARIANT& Left, const VARIANT& Top, const VARIANT& Width, const VARIANT& Height);
	void ClipboardCut(const VARIANT& Left, const VARIANT& Top, const VARIANT& Width, const VARIANT& Height);
	void DeleteSelectedAnnotations();
	void Flip();
	unsigned long GetSelectedAnnotationBackColor();
	COleFont GetSelectedAnnotationFont();
	CString GetSelectedAnnotationImage();
	short GetSelectedAnnotationLineStyle();
	short GetSelectedAnnotationLineWidth();
	void HideAnnotationToolPalette();
	BOOL IsClipboardDataAvailable();
	void Refresh();
	void RotateLeft();
	void RotateRight();
	void Save(const VARIANT& SaveAtZoom);
	void ScrollImage(short Direction, long ScrollAmount);
	void SelectAnnotationGroup(LPCTSTR GroupName);
	void SetImagePalette(short Option);
	void SetSelectedAnnotationFillStyle(short Style);
	void SetSelectedAnnotationFont(LPDISPATCH Font);
	void SetSelectedAnnotationLineStyle(short Style);
	void SetSelectedAnnotationLineWidth(short Width);
	void ZoomToSelection();
	short GetAnnotationMarkCount(const VARIANT& GroupName, const VARIANT& AnnotationType);
	unsigned long GetSelectedAnnotationFillColor();
	unsigned long GetSelectedAnnotationFontColor();
	CString GetCurrentAnnotationGroup();
	void ConvertPageType(short PageType, const VARIANT& Repaint);
	void BurnInAnnotations(short Option, short MarkOption, const VARIANT& GroupName);
	void Draw(long Left, long Top, const VARIANT& Width, const VARIANT& Height);
	void SetSelectedAnnotationLineColor(long Color);
	void SetSelectedAnnotationFillColor(long Color);
	void HideAnnotationGroup(const VARIANT& GroupName);
	void ShowAnnotationGroup(const VARIANT& GroupName);
	short GetSelectedAnnotationFillStyle();
	void SaveAs(LPCTSTR Image, const VARIANT& FileType, const VARIANT& PageType, const VARIANT& CompressionType, const VARIANT& CompressionInfo, const VARIANT& SaveAtZoom);
	void SetSelectedAnnotationBackColor(long Color);
	void SetSelectedAnnotationFontColor(long Color);
	void DrawSelectionRect(long Left, long Top, long Width, long Height);
	void ShowAnnotationToolPalette(const VARIANT& ShowAttrDialog, const VARIANT& Left, const VARIANT& Top, const VARIANT& ToolTipText);
	void SelectTool(short ToolId);
	void DisplayBlankImage(long ImageWidth, long ImageHeight, const VARIANT& ResolutionX, const VARIANT& ResolutionY, const VARIANT& PageType);
	void ClipboardPaste(const VARIANT& Left, const VARIANT& Top);
	void PrintImage(const VARIANT& StartPage, const VARIANT& EndPage, const VARIANT& OutputFormat, const VARIANT& Annotations, const VARIANT& Printer, const VARIANT& Driver, const VARIANT& PortNumber);
	void FitTo(short Option, const VARIANT& Repaint);
	void ShowAttribsDialog();
	void ShowRubberStampDialog();
	void EditSelectedAnnotationText(long Left, long Top);
	void CompletePaste();
	void SetCurrentAnnotationGroup(LPCTSTR GroupName);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_IMGEDIT_H__62C4C591_CE1A_11D1_A4D9_00A0242E2BA0__INCLUDED_)
